{:visible_files=>{"Life.cs"=>{:scroll_left=>"0", :content=>"using System;\n\npublic class Life\n{\n    public static string[] NextGeneration(string[] inputField)\n    {\n        if(inputField == null)\n        {\n            return null;\n        }\n\n        var result = new String[inputField.Length];\n\n        for(int i=0; i < inputField.Length; i++)\n        {\n            string resultRow = \"\";\n            \n            for(int j=0; j < inputField[i].Length; j++)\n            {\n                resultRow  += GetNewCellGeneration(i, j, inputField);\n            }\n            result[i] = resultRow;\n        }\n\n        return result;\n    \n    }\n\n    public static string GetNewCellGeneration(int row, int column, String[] grid)\n    {\n        int numberOfNeighbours = GetNumberOfNeighbours(row, column, grid);\n        \n        if(grid[row][column] == 'x')\n        {\n            if(numberOfNeighbours < 2)\n            {\n                return \".\";\n            }\n            else if(numberOfNeighbours > 3)\n            {\n                return \".\";\n            }\n            else{\n                return \"x\";\n            }\n        }\n        else {\n            if(numberOfNeighbours == 3)\n            {\n                return \"x\";\n            }\n        }\n\n        return \".\";  \n\n        \n\n    }\n\n    public static int GetNumberOfNeighbours(int row, int column, String[] grid)\n    {\n        int result = 0;\n\n        for (int i = -1; i <=1; i++)\n        {\n            for (int j= -1; j<= 1; j++)\n            {\n                if (i == 0 && j==0)\n                {\n                    continue;\n                }\n                int y = row + i;\n                int x = column+ j;\n                if (y < 0)\n                {\n                    continue;\n                }\n                if (y >= grid.Length)\n                {\n                    continue;\n                }\n                if (x < 0)\n                {\n                    continue;\n                }\n                if (x >= grid[y].Length)\n                {\n                    continue;\n                }\n                if (grid[y][x] == 'x')\n                {\n                    result++;\n                }\n            }\n         }\n\n        return result;\n    }\n}\n", :caret_pos=>"1170", :scroll_top=>"546"}, "cyberdojo.sh"=>{:scroll_left=>"0", :content=>"gmcs -t:library Life.cs\nif [ $? -eq 0 ]; then\n  gmcs -t:library -r:Life.dll -r:nunit.framework.dll LifeTest.cs\n  if [ $? -eq 0 ]; then\n    nunit-console -nologo LifeTest.dll\n  fi\nfi\n\n", :caret_pos=>"165", :scroll_top=>"0"}, "output"=>{:scroll_left=>"0", :content=>".F.F......F.F...\nTests run: 12, Failures: 4, Not run: 0, Time: 0.083 seconds\r\n\r\nTest Case Failures:\r\n1) LifeTest.CellWith3Or4Neighbours_WillLiveForever :   String lengths are both 8. Strings differ at index 5.\n  Expected: \"........\"\n  But was:  \".....x..\"\n  ----------------^\n\r\nat LifeTest.GridsAreEqual (System.String[] expected, System.String[] actual) [0x00000]\nat LifeTest.CellWith3Or4Neighbours_WillLiveForever () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n2) LifeTest.CellWith4Neighbours_Dies :   String lengths are both 8. Strings differ at index 2.\n  Expected: \"...x....\"\n  But was:  \"..xxx...\"\n  -------------^\n\r\nat LifeTest.GridsAreEqual (System.String[] expected, System.String[] actual) [0x00000]\nat LifeTest.CellWith4Neighbours_Dies () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n3) LifeTest.GridWith3Living_Return1LivingInGrid :   String lengths are both 8. Strings differ at index 2.\n  Expected: \"...x....\"\n  But was:  \"..xxx...\"\n  -------------^\n\r\nat LifeTest.GridsAreEqual (System.String[] expected, System.String[] actual) [0x00000]\nat LifeTest.GridWith3Living_Return1LivingInGrid () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n4) LifeTest.GridWith3LivingAlignedInRow_Return1LivingInGrid :   String lengths are both 8. Strings differ at index 3.\n  Expected: \"........\"\n  But was:  \"...x....\"\n  --------------^\n\r\nat LifeTest.GridsAreEqual (System.String[] expected, System.String[] actual) [0x00000]\nat LifeTest.GridWith3LivingAlignedInRow_Return1LivingInGrid () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n\r\n", :caret_pos=>"735", :scroll_top=>"0"}, "LifeTest.cs"=>{:scroll_left=>"0", :content=>"using System;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class LifeTest\n{\n    [Test]\n    public void EmptyField_ReturnsEmptyResult()\n    {\n        string[] expected = null;\n        var actual = Life.NextGeneration(null);\n        Assert.AreEqual(expected, actual);\n    }\n    \n    [Test]\n    public void ResultHasSameDimentionsAsTheInput()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        Assert.AreEqual(4, actual.Length);\n        Assert.AreEqual(input[0].Length, actual[0].Length);\n        Assert.AreEqual(input[1].Length, actual[1].Length);\n        Assert.AreEqual(input[2].Length, actual[2].Length);\n        Assert.AreEqual(input[3].Length, actual[3].Length);\n    }\n\n    [Test]\n    public void EmptyField_GeneratesEmptyField()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith1Living0Neighbours_GeneratesEmptyField()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"..x.....\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith3Rows_Return3Rows()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith7Columns_Return7Columns()\n    {\n        string[] input = new String[] {\n            \".......\",\n            \".......\",\n            \".......\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \".......\",\n            \".......\",\n            \".......\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith1Living_ReturnEmptyGrid()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"...x....\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith3Living_Return1LivingInGrid()\n    {\n        string[] input = new String[] {\n            \"...x....\",\n            \"...x....\",\n            \"...x....\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"...x....\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith3LivingAlignedInRow_Return1LivingInGrid()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"..xxx...\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"...x....\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n    \n    [Test]\n    public void CellWith4Neighbours_Dies()\n    {\n        string[] input = new String[] {\n            \"...x....\",\n            \"..xxx...\",\n            \"...x....\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"...x....\",\n            \"..x.x...\",\n            \"...x....\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void CellWith3Or4Neighbours_WillLiveForever()\n    {\n        string[] input = new String[] {\n            \"...xxx..\",\n            \"........\",\n            \"...xx...\",\n            \"...xx...\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"....x...\",\n            \"........\",\n            \"...xx...\",\n            \"...xx...\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n        [Test]\n    public void DeadCellWith3Neighbours_WillLiveResurect()\n    {\n        string[] input = new String[] {\n            \"...xxx..\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"....x...\",\n            \"....x...\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n\n    private bool GridsAreEqual(string[] expected, string[] actual)\n    {\n        Assert.IsNotNull(expected);\n        Assert.IsNotNull(actual);\n        Assert.AreEqual(expected.Length, actual.Length);\n        for (int i = 0; i < expected.Length; i++) \n        {\n            Assert.AreEqual(expected[i], actual[i]);\n        }\n        return true;\n\n    }\n}\n\n", :caret_pos=>"5146", :scroll_top=>"4625"}, "instructions"=>{:scroll_left=>"0", :content=>"Your task is to write a program to calculate the next\ngeneration of Conway's game of life, given any starting\nposition. You start with a two dimensional grid of cells, \nwhere each cell is either alive or dead. The grid is finite, \nand no life can exist off the edges. When calculating the \nnext generation of the grid, follow these four rules:\n\n1. Any live cell with fewer than two live neighbours dies, \n   as if caused by underpopulation.\n2. Any live cell with more than three live neighbours dies, \n   as if by overcrowding.\n3. Any live cell with two or three live neighbours lives \n   on to the next generation.\n4. Any dead cell with exactly three live neighbours becomes \n   a live cell.\n\nExamples: * indicates live cell, . indicates dead cell\n\nExample input: (4 x 8 grid)\n4 8\n........\n....*...\n...**...\n........\n\nExample output:\n4 8\n........\n...**...\n...**...\n........\n\n", :caret_pos=>"619", :scroll_top=>"0"}}, :output=>".F.F......F.F...\nTests run: 12, Failures: 4, Not run: 0, Time: 0.083 seconds\r\n\r\nTest Case Failures:\r\n1) LifeTest.CellWith3Or4Neighbours_WillLiveForever :   String lengths are both 8. Strings differ at index 5.\n  Expected: \"........\"\n  But was:  \".....x..\"\n  ----------------^\n\r\nat LifeTest.GridsAreEqual (System.String[] expected, System.String[] actual) [0x00000]\nat LifeTest.CellWith3Or4Neighbours_WillLiveForever () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n2) LifeTest.CellWith4Neighbours_Dies :   String lengths are both 8. Strings differ at index 2.\n  Expected: \"...x....\"\n  But was:  \"..xxx...\"\n  -------------^\n\r\nat LifeTest.GridsAreEqual (System.String[] expected, System.String[] actual) [0x00000]\nat LifeTest.CellWith4Neighbours_Dies () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n3) LifeTest.GridWith3Living_Return1LivingInGrid :   String lengths are both 8. Strings differ at index 2.\n  Expected: \"...x....\"\n  But was:  \"..xxx...\"\n  -------------^\n\r\nat LifeTest.GridsAreEqual (System.String[] expected, System.String[] actual) [0x00000]\nat LifeTest.GridWith3Living_Return1LivingInGrid () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n4) LifeTest.GridWith3LivingAlignedInRow_Return1LivingInGrid :   String lengths are both 8. Strings differ at index 3.\n  Expected: \"........\"\n  But was:  \"...x....\"\n  --------------^\n\r\nat LifeTest.GridsAreEqual (System.String[] expected, System.String[] actual) [0x00000]\nat LifeTest.GridWith3LivingAlignedInRow_Return1LivingInGrid () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n\r\n", :current_filename=>"output"}
