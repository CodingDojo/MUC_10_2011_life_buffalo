{:visible_files=>{"Life.cs"=>{:scroll_left=>"0", :content=>"using System;\n\npublic class Life\n{\n    public const char liveCellSymbol = 'x';\n    public const char deadCellSymbol = '.';    \n\n    public static string[] NextGeneration(string[] inputField)\n    {\n        if(inputField == null)\n        {\n            return null;\n        }\n\n        var result = new String[inputField.Length];\n\n        for(int i=0; i < inputField.Length; i++)\n        {\n            string resultRow = \"\";\n            \n            for(int j=0; j < inputField[i].Length; j++)\n            {\n                resultRow  += GetNewCellGeneration(i, j, inputField);\n            }\n            result[i] = resultRow;\n        }\n\n        return result;\n    \n    }\n\n    public static string GetNewCellGeneration(int row, int column, String[] grid)\n    {\n        int numberOfNeighbours = GetNumberOfNeighbours(row, column, grid);\n        \n        if(IsAlive(grid[row][column]))\n        {\n            if(numberOfNeighbours < 2)\n            {\n                return deadCellSymbol;\n            }\n            else if(numberOfNeighbours > 3)\n            {\n                return deadCellSymbol;\n            }\n            else{\n                return liveCellSymbol;\n            }\n        }\n        else {\n            if(numberOfNeighbours == 3)\n            {\n                return liveCellSymbol;\n            }\n        }\n\n        return deadCellSymbol;  \n    }\n\n    public static int GetNumberOfNeighbours(int row, int column, String[] grid)\n    {\n        int result = 0;\n\n        for (int i = -1; i <=1; i++)\n        {\n            for (int j= -1; j<= 1; j++)\n            {\n                if (i == 0 && j==0)\n                {\n                    continue;\n                }\n                int y = row + i;\n                int x = column+ j;\n                if (y < 0)\n                {\n                    continue;\n                }\n                if (y >= grid.Length)\n                {\n                    continue;\n                }\n                if (x < 0)\n                {\n                    continue;\n                }\n                if (x >= grid[y].Length)\n                {\n                    continue;\n                }\n                if (IsAlive(grid[y][x]))\n                {\n                    result++;\n                }\n            }\n         }\n\n        return result;\n    }\n\n    public bool IsAlive(char cellSymbol)\n    {\n        return cellSymbol == liveCellSymbol;\n    }\n}\n", :caret_pos=>"76", :scroll_top=>"0"}, "cyberdojo.sh"=>{:scroll_left=>"0", :content=>"gmcs -t:library Life.cs\nif [ $? -eq 0 ]; then\n  gmcs -t:library -r:Life.dll -r:nunit.framework.dll LifeTest.cs\n  if [ $? -eq 0 ]; then\n    nunit-console -nologo LifeTest.dll\n  fi\nfi\n\n", :caret_pos=>"165", :scroll_top=>"0"}, "output"=>{:scroll_left=>"0", :content=>"Life.cs(36,12): error CS0120: An object reference is required to access non-static member `Life.IsAlive(char)'\nLife.cs(40,17): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(44,17): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(47,17): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(53,17): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(57,9): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(90,21): error CS0120: An object reference is required to access non-static member `Life.IsAlive(char)'\nCompilation failed: 7 error(s), 0 warnings\n", :caret_pos=>"76", :scroll_top=>"0"}, "LifeTest.cs"=>{:scroll_left=>"0", :content=>"using System;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class LifeTest\n{\n    [Test]\n    public void EmptyField_ReturnsEmptyResult()\n    {\n        string[] expected = null;\n        var actual = Life.NextGeneration(null);\n        Assert.AreEqual(expected, actual);\n    }\n    \n    [Test]\n    public void ResultHasSameDimentionsAsTheInput()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        Assert.AreEqual(4, actual.Length);\n        Assert.AreEqual(input[0].Length, actual[0].Length);\n        Assert.AreEqual(input[1].Length, actual[1].Length);\n        Assert.AreEqual(input[2].Length, actual[2].Length);\n        Assert.AreEqual(input[3].Length, actual[3].Length);\n    }\n\n    [Test]\n    public void EmptyField_GeneratesEmptyField()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith1Living0Neighbours_GeneratesEmptyField()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"..x.....\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith3Rows_Return3Rows()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith7Columns_Return7Columns()\n    {\n        string[] input = new String[] {\n            \".......\",\n            \".......\",\n            \".......\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \".......\",\n            \".......\",\n            \".......\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith1Living_ReturnEmptyGrid()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"...x....\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith3Living_Return3LivingInGrid()\n    {\n        string[] input = new String[] {\n            \"...x....\",\n            \"...x....\",\n            \"...x....\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"..xxx...\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void GridWith3LivingAlignedInRow_Return3LivingInGrid()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"..xxx...\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"...x....\",\n            \"...x....\",\n            \"...x....\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n    \n    [Test]\n    public void CellWith4Neighbours_Dies()\n    {\n        string[] input = new String[] {\n            \"...x....\",\n            \"..xxx...\",\n            \"...x....\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"..xxx...\",\n            \"..x.x...\",\n            \"..xxx...\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void CellWith3Or4Neighbours_WillLiveForever()\n    {\n        string[] input = new String[] {\n            \"...xxx..\",\n            \"........\",\n            \"...xx...\",\n            \"...xx...\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"....x...\",\n            \".....x..\",\n            \"...xx...\",\n            \"...xx...\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n    [Test]\n    public void DeadCellWith3Neighbours_WillLiveResurect()\n    {\n        string[] input = new String[] {\n            \"...xxx..\",\n            \"........\",\n            \"........\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"....x...\",\n            \"....x...\",\n            \"........\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n\n    [Test]\n    public void InstructionTest_WillBeGreenForever()\n    {\n        string[] input = new String[] {\n            \"........\",\n            \"....x...\",\n            \"...xx...\",\n            \"........\",\n        };\n\n        var actual = Life.NextGeneration(input);\n\n        string[] expected = new String[] {\n            \"........\",\n            \"...xx...\",\n            \"...xx...\",\n            \"........\",\n        };\n\n        Assert.IsTrue(GridsAreEqual(expected, actual));\n    }\n\n\n\n    private bool GridsAreEqual(string[] expected, string[] actual)\n    {\n        Assert.IsNotNull(expected);\n        Assert.IsNotNull(actual);\n        Assert.AreEqual(expected.Length, actual.Length);\n        for (int i = 0; i < expected.Length; i++) \n        {\n            Assert.AreEqual(expected[i], actual[i]);\n        }\n        return true;\n\n    }\n}\n\n", :caret_pos=>"5716", :scroll_top=>"4962"}, "instructions"=>{:scroll_left=>"0", :content=>"Your task is to write a program to calculate the next\ngeneration of Conway's game of life, given any starting\nposition. You start with a two dimensional grid of cells, \nwhere each cell is either alive or dead. The grid is finite, \nand no life can exist off the edges. When calculating the \nnext generation of the grid, follow these four rules:\n\n1. Any live cell with fewer than two live neighbours dies, \n   as if caused by underpopulation.\n2. Any live cell with more than three live neighbours dies, \n   as if by overcrowding.\n3. Any live cell with two or three live neighbours lives \n   on to the next generation.\n4. Any dead cell with exactly three live neighbours becomes \n   a live cell.\n\nExamples: * indicates live cell, . indicates dead cell\n\nExample input: (4 x 8 grid)\n4 8\n........\n....*...\n...**...\n........\n\nExample output:\n4 8\n........\n...**...\n...**...\n........\n\n", :caret_pos=>"782", :scroll_top=>"47"}}, :output=>"Life.cs(36,12): error CS0120: An object reference is required to access non-static member `Life.IsAlive(char)'\nLife.cs(40,17): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(44,17): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(47,17): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(53,17): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(57,9): error CS0029: Cannot implicitly convert type `char' to `string'\nLife.cs(90,21): error CS0120: An object reference is required to access non-static member `Life.IsAlive(char)'\nCompilation failed: 7 error(s), 0 warnings\n", :current_filename=>"output"}
